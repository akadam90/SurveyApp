@model SurveyApp.Models.SurveyModel

@{
    ViewBag.Title = "Home Page";
}

@functions {
    public void Create()
    {
        
    }
}
  
<head>
    <title></title>


    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>

    <script type="text/javascript">
    var debug = null;
    function func() {

    }

    $( document ).ready(function() {

        $("#Survey-form").append('<input type="hidden" id="Save-Option" name="Save-Option-Hidden" value=0>');

        var data = @Html.Raw(Json.Encode(Model));
        debug = data;
        var q = Object.keys(data.questions).length;
      

        for(i=0;i<q;i++)
        {            
            createQuestion(data.questions[i]);
            if(i==q-1)
            {                
                $("#Survey-form").append('<br/><div class="col-lg-2 col-sm-2 col-md-2"><button type="submit" class="btn btn-primary" id="Survey-@Model.SurveyId-save-btn" value="SaveButton">Save</button></div>');
                $("#Survey-form").append('<div class="col-lg-2 col-sm-2 col-md-2"><button type="submit" class="btn btn-primary" id="Survey-@Model.SurveyId-submit-btn" value="SubmitButton">Submit</button></div>');                
              
                var submitActor = null;
                var $form = $( '#Survey-form' );
                var $submitActors = $form.find( 'button[type=submit]' );

                $submitActors.click( function( event )
                {
                    submitActor = this;
                    alert( submitActor.value );
                });

            }
            
            }


            $('input[type="radio"]').change(function(){
                $('input[type="radio"]').each(function(){
                    var radioName = $(this).attr('value');
                        if(this.checked) {
                            $("div[id*="+radioName +"-dep]").css('display', 'block');      // do something when selected
                        } else {
                            $("div[id*="+radioName +"-dep]").css('display', 'none');       // do something when deselected
                        }
                    });
            });


            $('input[type="checkbox"]').change(function(){
                var itemName = $(this).attr('value');
                if($(this).prop('checked')==true)
                {
                    $("div[id*="+itemName +"-dep]").each(function (i, el) {
                        $(this).css("display", "block");
                    });
                }
                else
                {
                    $("div[id*="+itemName +"-dep]").each(function (i, el) {
                        $(this).css("display", "none");
                    });
                }

            });

            //if any of the option is selected
            $('input[type="option"]').on('change', function (e) {
                var optSelected = $(this).attr('id');              ;
            });


            $('select').change( function() {
                var pos = (this.value).lastIndexOf('-');                

                $("option[value*=Dep-]").each(function (i, el) {
                    $(this).css("display", "none");
                });

                $("[value*=Dep-"+ (this.value).substring(pos+1) +"]").css('display', 'block');
            });

            $("#Survey-form").submit(function(e){                 
                if ( null === submitActor )
                {
                    // If no actor is explicitly clicked, the browser will
                    // automatically choose the first in source-order
                    // so we do the same here
                    submitActor = $submitActors[0];
                }

                if( submitActor.value == "SaveButton")
                {
                    $("#Save-Option").val(1);
                }
                else if(submitActor.value == "SubmitButton")
                {
                    $("#Save-Option").val(2);
                }                                               

                var passValidation = true;
                var errorCount =0;

                var regex = (/<img.*|<script.*|<style.*|<embeded.*/ig);   
                $(".Error").remove();

                var inputs = $(this).find('input[type="text"], textarea');
                for(var m=0;m<inputs.length;m++)
                    {                    
                        if(regex.test(inputs[m].value)==true)
                        {                       
                            passValidation=false;
                            // $("#Error-Section").append('<span style="color:red;font-weight:bold">Invalid characters in the TextArea/TextBox</span></br></br>');
                            $('<span class="Error" style="color:red;font-weight:bold">Invalid characters in the TextArea/TextBox</span></br>').insertBefore(inputs[m]);
                            errorCount++;
                        }
                        var maxChar = inputs[m].id.split("-");
                        if(maxChar[5]!=0)
                        {
                            if(inputs[m].value.length>maxChar[5])
                            {     
                                passValidation=false;
                                errorCount++;
                                $('<span class="Error" style="color:red;font-weight:bold">Max Characters entered must not be more than '+maxChar[5] +'</span></br>').insertBefore(inputs[m]);
                            }
                           
                        }
                    }                
                

                var response = @Html.Raw(Json.Encode(Model.RequiredQuestions));

                for (var i = 0; i < response.length; i++) {                         
                    var res = checkInputSelect(response[i].EntityId,0);
                    if(res==3)
                    //if(checkInputSelect(response[i].EntityId,0)==false)                    
                    {                        
                            if(response[i].IsDependency==true)
                                    {
                                        if(response[i].DependentAttrId!=null)
                                        {
                                            if(checkInputSelect(response[i].DependentAttrId,1)==2)
                                            {
                                                passValidation=false; 
                                                errorCount++;
                                                $("div[id*=Attr-"+ response[i].DependentAttrId+"-dep-"+ response[i].QuestionOrder+"]").prepend('<span class="Error" style="color:red;font-weight:bold">Sub-Question " '+ response[i].Value +'" must be answered </span>');
                                            }
                                        }
                                        if(response[i].DependentEntityId!=null)
                                        {
                                            if(checkInputSelect(response[i].DependentEntityId)==2)
                                            {
                                                passValidation=false;
                                                errorCount++;
                                                $("div[id*=Attr-"+ response[i].DependentAttrId+"-dep-"+response[i].QuestionOrder+"]").prepend('<span class="Error" style="color:red;font-weight:bold">Sub-Question " '+ response[i].Value +'" must be answered </span>');
                                            }
                                        }
                                    }
                                    else
                                    {
                                        passValidation=false;
                                        errorCount++;
                                        $("#Q-"+response[i].EntityId).prepend('<span class="Error" style="color:red;font-weight:bold">Question '+ response[i].QuestionOrder+' must be answered </span>');
                                    }
                    }
                    else if(res==4)
                    {                       
                        passValidation=false;
                        errorCount++;
                        $("#Q-"+response[i].EntityId).prepend('<span class="Error" style="color:red;font-weight:bold">Response to Question " '+response[i].Value  +'" has invalid characters in the TextArea/TextBox</span>');

                    }
                                            
                }                                       
                if(errorCount>0)
                {                    
                    $('#ErrorModal .modal-body').html('<div><span style="color:red; font-weight:bold">'+errorCount +' errors</span> encountered while submitting the Survey. Please check all the errors specified in red color next to the question and try submitting again . </div>') ;
                    $("#ErrorModal").modal("show");
                }
                return passValidation;
                });


        

            $("#Get-Survey-btn").click(function(){
                alert("Get Survy 1 results");

                $.ajax({
                    url: '../Home/getSurveyResult',
                    type: 'GET',
                    dataType: 'json',
                    data:
                         {
                             surveyId : 1,
                             userId :1
                         },
                    success: function (response) {
                        data = response;
                        for(d=0;d<data.results.length;d++)
                        {
                            if(data.results[d].Type=="Radio")
                            {
                                $("input[id*=Attr-"+data.results[d].AttrId +"]").attr('checked',true);
                            }
                            else if (data.results[d].Type=="CheckBox")
                            {
                                $("input[id*=Attr-"+data.results[d].AttrId +"]").attr('checked',true);
                            }
                            else if(data.results[d].Type=="TextBox")
                            {
                                $("input[id*=Attr-"+data.results[d].AttrId +"]").val(data.results[d].Value);
                            }
                            else if(data.results[d].Type=="TextArea")
                            {
                                $("textarea[id*=Attr-"+data.results[d].AttrId +"]").text(data.results[d].Value);
                            }
                            //Work on this
                            else if(data.results[d].Type=="Option")
                            {
                                $("option[id*=Attr-"+ data.results[d].AttrId+"]").attr("selected",true);
                            }

                        }

                    },

                    error: function (xhr, status, error) {
                        alert(error);
                    }
                });

            });
        });


        function checkInputSelect(id,isAttr) {
             //var pass= false; 
            //true= 2, false=3 , script= 4
            var pass = 3;
            var idExpression ;
            var regex = (/<img.*|<script.*|<style.*|<embeded.*/ig);                                                    

            if(isAttr==1)
            {
                idExpression = "Attr-"+id;
            }
            else{
                idExpression = "Q-"+id+"-";
            }

            $("input[id*="+idExpression+"]").each(function(i,el){
                if(this.type=="radio" || this.type=="checkbox")
                {
                    if($(this).prop('checked')==true)
                    {
                        //pass=true;
                        pass = 2;
                    }
                }
                else if(this.type=="text")
                {
                    if(this.value!="" )
                    {
                        if(regex.test(this.value)==false)                                               
                        {
                            //pass=true;
                            pass=2;
                        }
                        else
                        {                                                        
                            //pass=false;
                            pass= 4;                            
                        }
                    }
                }
            });

            $("textarea[id*="+ idExpression +"]").each(function(i,el){
                if(this.value!="")
                {                    
                    if(regex.test(this.value)==false)
                    {                        
                        //pass=true;
                        pass = 2;
                    }
                    else
                    {                        
                       // pass=false;
                        pass = 4;                            
                    }
                }
            });

            $("select[id*="+ idExpression+"]").each(function(i,el){
                pass=true;
                if(this.selectedIndex==0)
                {
                    //pass=false;
                    pass = 3;
                }
            });
            return pass;
        }

        function createQuestion(quest,dependentEntity,parentName,depno,parentQuestId){

            if(dependentEntity==1) //if dependent Question
            {
                $("#Q-"+parentQuestId).append('<div id="'+ parentName+'-dep-'+depno+'" style="display: none"></div>');       //create an invisible div inside the main Question div=id="Q-parentQuestionId"

                if(quest.IsRequired==true)
                {
                    $("#"+parentName+"-dep-"+depno).append('<br><label for="Q-'+quest.EntityId +'" style="margin-left:'+ 25*quest.Indent +'px" >Q'+ quest.QuestionOrder+' : '+ quest.Value +'<span style="color:red"> * </span></label><br>');     //add question label to div
                }
                else
                {
                    $("#"+parentName+"-dep-"+depno).append('<br><label for="Q-'+quest.EntityId +'" style="margin-left:'+ 25*quest.Indent +'px" >Q'+ quest.QuestionOrder+' : '+ quest.Value +'</label><br>');     //add question label to div
                }

                //Case 1 : Has child Attributes
                var children = (Object.keys(quest.ChildAttributes).length);
                if(children > 0)
                {
                    var j = 0;
                    while(j < Object.keys(quest.ChildAttributes).length)        //add all child attributes to that question in that div
                    {
                        var current = j;
                        $("#"+parentName+"-dep-"+depno).append(createChildAttribute(quest.ChildAttributes[j],quest.EntityId,1));
                        j = current;
                        j++;
                    }
                }


                //Case 2 : Has Subquestions or Dropdowns i.e Child Entities
                var childEntities = (Object.keys(quest.ChildEntities).length)
                {
                    if(childEntities > 0)
                    {
                        var e = 0;
                        while(e < Object.keys(quest.ChildEntities).length)
                        {
                            var currentEnt = e;
                            if(quest.ChildEntities[e].IsDependency==false)
                            {
                                createEntity(quest.ChildEntities[e],0,quest.EntityId,0,parentName+'-dep-'+depno);
                            }
                            else{
                                createEntity(quest.ChildEntities[e],1,quest.EntityId,0,parentName+'-dep-'+depno);
                            }

                            e = currentEnt;
                            e++;
                        }

                    }
                }
            }
            else{       //Independent Question
                $("#Survey-form").append('<div id="Q-'+ quest.EntityId+'"></div>');
                if(quest.IsRequired==true)
                {
                    $("#Q-"+quest.EntityId).append('<br><label for="Q-'+quest.EntityId +'" style="margin-left:'+ 25*quest.Indent +'px" >Q'+ quest.QuestionOrder+' : '+ quest.Value +'<span style="color:red"> * </span></label><br>');
                }
                else
                {
                    $("#Q-"+quest.EntityId).append('<br><label for="Q-'+quest.EntityId +'" style="margin-left:'+ 25*quest.Indent +'px" >Q'+ quest.QuestionOrder+' : '+ quest.Value +'</label><br>');
                }

                //Case 1 : Has child Attributes
                var children = (Object.keys(quest.ChildAttributes).length);
                if(children > 0)
                {
                    var j = 0;
                    while(j < Object.keys(quest.ChildAttributes).length)
                    {
                        var current = j;
                        createChildAttribute(quest.ChildAttributes[j],quest.EntityId,0);
                        j = current;
                        j++;
                    }
                }

                //Case 2 : Has Subquestions or Dropdowns i.e Child Entities
                var childEntities = (Object.keys(quest.ChildEntities).length)
                {
                    if(childEntities > 0)
                    {
                        var e = 0;
                        while(e < Object.keys(quest.ChildEntities).length)
                        {
                            var currentEnt = e;
                            if(quest.ChildEntities[e].IsDependency==false)
                            {
                                createEntity(quest.ChildEntities[e],0,quest.EntityId,0,quest.EntityId);
                            }
                            else{
                                createEntity(quest.ChildEntities[e],1,quest.EntityId,0,quest.EntityId);
                            }

                            e = currentEnt;
                            e++;
                        }

                    }
                }
            }
        }

        function createChildAttribute(child,parentQuest,dep)    //dep specifies whether this attribute belongs to a dependent question or incase of option if it depends on selection of something
        {
        if (child.Type==3) //checkbox
        {
            if(dep==1)
            {
                return '<input type="checkbox" id="Q-'+ parentQuest+'-Attr-'+  child.AttrId+'" name="Q-'+ parentQuest +'-Attr-'+child.AttrId +'" value="Attr-'+child.AttrId +'" style="margin-left:'+ 25*child.Indent +'px" />'+ child.Value +'<br>';
            }
            else
            {
                //createCheckBox(child);
                $('#Q-'+parentQuest).append('<input type="checkbox" id="Q-'+ parentQuest+'-Attr-'+  child.AttrId+'" name="Q-'+parentQuest+'-Attr-'+child.AttrId +'" value="Attr-'+child.AttrId +'" style="margin-left:'+25*child.Indent+'px" />'+ child.Value +'<br>');
                for(depno=0;depno<(Object.keys(child.DependentEntities).length);depno++)
                {
                    createEntity(child.DependentEntities[depno],1,"Attr-"+child.AttrId,child.DependentEntities[depno].QuestionOrder,parentQuest) ;
                }
            }
         }
        else if(child.Type==4)    //radio
        {
            if(dep==1)
            {
                return '<input type="radio" id="Q-'+ parentQuest+'-Attr-'+ child.AttrId+'" name="Q-'+parentQuest +'" value="Attr-'+child.AttrId+'" style="margin-left:'+ 25*child.Indent +'px" />'+child.Value +'<br>'
            }
            else
                {
                $('#Q-'+parentQuest).append('<input type="radio" id="Q-'+ parentQuest+'-Attr-'+ child.AttrId+'" name="Q-'+parentQuest +'" value="Attr-'+ child.AttrId+'" style="margin-left:'+ 25*child.Indent +'px" />'+ child.Value +'<br>');
                for(k=0;k<(Object.keys(child.DependentEntities).length);k++)
                    {
                    createEntity(child.DependentEntities[k],1,"Attr-"+child.AttrId,child.DependentEntities[k].QuestionOrder,parentQuest) ; //question/dropdown displayed based on selection of attribute child and its kth dep entity //second param tells attribute whose selection decides this
                    }
                }
            }

           else if(child.Type==5)  //textbox
           {
               if(child.MaxCharacters!=null)
               {
                   return '<input type="text" id="Q-'+ parentQuest+'-Attr-'+ child.AttrId+'-Max-'+ child.MaxCharacters+'" placeholder="Max '+ child.MaxCharacters+'characters" name="Q-'+ parentQuest+'-Attr-'+ child.AttrId+'" style="margin-left:'+ 25*child.Indent +'px" /><br>';
               }               
               else
               {
                   return '<input type="text" id="Q-'+ parentQuest+'-Attr-'+ child.AttrId+'-Max-0" name="Q-'+ parentQuest+'-Attr-'+ child.AttrId+'" style="margin-left:'+ 25*child.Indent +'px" /><br>';
               }
           }
            else if (child.Type==6) //textarea
            {
                if(dep==1)
                {
                    if(child.MaxCharacters!=null)
                    {
                        return ('<textarea rows="4" cols="50" id="Q-'+ parentQuest+'-Attr-'+ child.AttrId+'-Max-'+ child.MaxCharacters+'" placeholder="Max '+ child.MaxCharacters+' characters" name="Q-'+ parentQuest+'-Attr-'+ child.AttrId+'" style="margin-left:'+ 25*child.Indent +'px" ></textarea><br>');
                    }
                    else
                    {
                        return ('<textarea rows="4" cols="50" id="Q-'+ parentQuest+'-Attr-'+ child.AttrId+'-Max-0" name="Q-'+ parentQuest+'-Attr-'+ child.AttrId+'" style="margin-left:'+ 25*child.Indent +'px" ></textarea><br>');
                    }                    
                }
                else
                {if(child.MaxCharacters!=null)
                {                    
                    $('#Q-'+parentQuest).append('<textarea rows="4" cols="50" id="Q-'+ parentQuest+'-Attr-'+ child.AttrId+'-Max-'+ child.MaxCharacters+'" placeholder="Max '+child.MaxCharacters +' characters" name="Q-'+ parentQuest+'-Attr-'+ child.AttrId+'" style="margin-left:'+ 25*child.Indent +'px" ></textarea><br>');}
                else 
                {
                    $('#Q-'+parentQuest).append('<textarea rows="4" cols="50" id="Q-'+ parentQuest+'-Attr-'+ child.AttrId+'-Max-0" name="Q-'+ parentQuest+'-Attr-'+ child.AttrId+'" style="margin-left:'+ 25*child.Indent +'px" ></textarea><br>');
                }
                }
            }
            else if(child.Type==7) //option
            {
                //selection of this option has dependent question
                if(child.DependentEntities!=null)
                {
                    for(optDep=0;optDep<(Object.keys(child.DependentEntities).length);optDep++)
                    {
                        createEntity(child.DependentEntities[optDep],1,child.Value+"-"+child.AttrId,child.DependentEntities[optDep].QuestionOrder,parentQuest) ;
                    }

                }
                if(dep==1)
                {
                    return('<option value="Dep-'+ parentQuest+'-Attr-'+ child.AttrId+'" style="display:none;margin-left:'+ 25*child.Indent +'px">'+child.Value+'</option>');
                }
                else{
                    return('<option value="Dropdown-'+ parentQuest+'-Attr-'+child.AttrId+'" style="margin-left:'+ 25*child.Indent +'px" >'+child.Value +'</option>');
                }

            }

        }

        function createEntity(entity,dependentEntity,parentName,depno,parentQuestId)  //second param tells if dependent quest/dropdown , parentName basically tells the dependent Attr/Question
        {
            if(entity.Type==1)  //question
            {
                createQuestion(entity,dependentEntity,parentName,depno,parentQuestId);
            }
            else if(entity.Type==2)      //dropdown
            {

                // create dropdown
                if(dependentEntity==1)  //if dependetn on selection of some attribute
                {
                    $('#Q-'+parentName).append('<select id="Q-'+ parentName+'-Select-'+entity.EntityId +'-Entity-Dep-'+ entity.DependentEntityId+'" name="Q-'+ parentName+'-Select-'+entity.EntityId +'-Entity-Dep-'+ entity.DependentEntityId+'" style="margin-left:'+ 25*entity.Indent +'px" ></select></br></br>');
                   $("#Q-"+ parentName+"-Select-"+entity.EntityId+"-Entity-Dep-"+ entity.DependentEntityId).append('<option value=""></option>');

                    var options = (Object.keys(entity.ChildAttributes).length);
                    if(options>0)
                    {
                        var opt = 0;
                        while(opt < (Object.keys(entity.ChildAttributes).length))
                        {
                            var currentOpt = opt;
                            if(entity.ChildAttributes[opt].AttrDependencyId==null)
                            {
                                $("#Q-"+ parentName+"-Select-"+entity.EntityId +"-Entity-Dep-"+ entity.DependentEntityId).append(createChildAttribute(entity.ChildAttributes[opt],entity.EntityId,0));
                            }
                            else
                            {
                                $("#Q-"+ parentName+"-Select-"+entity.EntityId +"-Entity-Dep-"+ entity.DependentEntityId).append(createChildAttribute(entity.ChildAttributes[opt],entity.ChildAttributes[opt].AttrDependencyId,1));
                            }
                            opt = currentOpt;
                            opt++;
                        }
                    }
                }
                else
                {
                    $('#Q-'+parentName).append('<select id="Q-'+ parentName+'-Select-'+entity.EntityId +'" name="Q-'+ parentName+'-Select-'+entity.EntityId +'" style="margin-left:'+ 25*entity.Indent +'px"></select></br></br>');
                    $("#Q-"+ parentName+"-Select-"+entity.EntityId).append('<option value=""></option>');

                    var options = (Object.keys(entity.ChildAttributes).length);
                    if(options>0)
                    {
                        var opt = 0;
                        while(opt < (Object.keys(entity.ChildAttributes).length))
                        {
                            var currentOpt = opt;
                            if(entity.ChildAttributes[opt].AttrDependencyId==null)
                            {
                                $("#Q-"+ parentName+"-Select-"+entity.EntityId).append(createChildAttribute(entity.ChildAttributes[opt],entity.EntityId,0));
                            }
                            else
                            {
                                $("#Q-"+ parentName+"-Select-"+entity.EntityId).append(createChildAttribute(entity.ChildAttributes[opt],entity.ChildAttributes[opt].AttrDependencyId,1));
                            }
                            opt = currentOpt;
                            opt++;
                        }
                    }
                }


            }
        }
    </script>

</head>
  
<form id="Survey-form" onsubmit="func()" action="@Url.Action("SaveSurveyResult", "Home")" method="post">
    <input type="hidden" id="Survey-Id" name="Survey-Id-Hidden" value="1" />
    <input type="hidden" id="User-Id" name="User-Id-Hidden" value="2" />
    <div id="Error-Section"> </div>
    @*<button id="Get-Survey-btn" type="button" class="button btn-primary">Get Survey</button><br />*@

</form>

@section PartialsWithScripts
{
    @Html.Partial("_ErrorForm");
    }






